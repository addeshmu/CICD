# set up colors to differentiate make logs
NO_COLOR=\033[0m
OK_COLOR=\033[32;01m
ERROR_COLOR=\033[31;01m
WARN_COLOR=\033[33;01m
AUTOGENERATED_WARNING='Autogenerated from `make mockery` do not edit manually'
CIRCLE_TEST_RESULTS ?= test-results


# all the packages in the code
GO_PACKAGES = $(shell go list ./... | grep -v vendor | grep -v mocks | grep -v testdata)

# files in aforemntioned packages
GO_FILES = $(shell find . -name "*.go" | grep -v vendor | uniq)

# linker flags
LDFLAGS = -ldflags="-X ${PKG}/pkg/version.VERSION=${VERSION}"

# This repo's root import path (under GOPATH).
PKG := github.mheducation.com/MHEducation/dle-roster-sdk-go

# Where to push the docker image.
ALL_ARCH := amd64

# Set default base image
IMAGE := $(REGISTRY)/$(BIN)-$(ARCH)
BUILD_IMAGE ?= golang:1.8-alpine

# This version-strategy uses git tags to set the version string
VERSION ?= $(shell git describe --always --dirty)

COVER_HTML = $(CIRCLE_ARTIFACTS)/htmlcov/index.html

coverage:
	@echo "$(OK_COLOR)==> Generating Coverage Report$(NO_COLOR)"
	mkdir -p $(CIRCLE_ARTIFACTS)/htmlcov
	overalls -project=$(PKG) -covermode=count
	go tool cover -html=overalls.coverprofile -o $(COVER_HTML)

init:
	@echo "$(OK_COLOR)==> Init$(NO_COLOR)"
	make init-circle
	go get -u github.com/alecthomas/gometalinter
	gometalinter --install
	go get -u github.com/vektra/mockery/...

init-circle:
	@echo "$(OK_COLOR)==> Circle Init$(NO_COLOR)"
	@if [ -z "$$CIRCLE_SHA1" ]; then \
		glide --debug mirror set \
		https://github.mheducation.com/MHEducation/dle-common-urn-lib-go.git \
		git@github.mheducation.com:MHEducation/dle-common-urn-lib-go.git; \
	else \
		glide --debug mirror set \
		https://github.mheducation.com/MHEducation/dle-common-urn-lib-go.git \
		https://${GITHUB_MHE_TOKEN}@github.mheducation.com/MHEducation/dle-common-urn-lib-go.git; \
	fi;
	glide install
	go get -u github.com/go-playground/overalls
	go get -u github.com/jstemmer/go-junit-report

format:
	@echo "$(OK_COLOR)==> Formatting$(NO_COLOR)"
	gofmt -s -l -w $(GO_FILES)

lint:
	@echo "$(OK_COLOR)==> Linting$(NO_COLOR)"
	go list -f '{{.Dir}}' ./... | grep -v 'vendor' | xargs gometalinter --exclude="mock_.+go"

lint-circle:
	@echo "$(OK_COLOR)==> Running circle lint$(NO_COLOR)"
	go list -f '{{.Dir}}' ./... | grep -v 'vendor' | xargs gometalinter --json > lint.json

local-circle:
	@echo "$(OK_COLOR)==> Running local circle$(NO_COLOR)"
	circleci update
	circleci build

qt:
	@echo "$(OK_COLOR)==> Running quick test$(NO_COLOR)"
	go test -short $(GO_PACKAGES)

test: format vet lint
	@echo "$(OK_COLOR)==> Testing $(NO_COLOR)"
	go test -race -cover $(GO_PACKAGES)

test-circle:
	@echo "$(OK_COLOR)==> Running circle test$(NO_COLOR)"
	mkdir -p $(CIRCLE_TEST_RESULTS)
	/bin/bash -c "set -euxo pipefail; go test -v -short -race -cover $(GO_PACKAGES) | go-junit-report > $(CIRCLE_TEST_RESULTS)/report.xml"

version:
	@echo $(VERSION)

vet:
	@echo "$(OK_COLOR)==> Vetting$(NO_COLOR)"
	go vet $(GO_PACKAGES)
